# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cYdYzjAcYpVidrZJWwFQGD1usJQstL6j

# Laporan Proyek Machine Learning - Rizki Wahyu Nurcahyani Fajarwati
- **Nama:** Rizki Wahyu Nurcahyani Fajawrati
- **Email:** a123xbf441@devacademy.id
- **ID Dicoding:** a123xbf441

## Import Semua Packages/Library yang Digunakan

Dalam mengerjakan proyek ini, langkah awalnyaadalah mengimpor semua library yang diperlukan. Library-library ini digunakan untuk berbagai keperluan seperti:
- manipulasi data (pandas, numpy),
- visualisasi data (matplotlib, seaborn),
- preprocessing menggunakan TF-IDF dan matriks menggunakan cosine similiarity
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""## Data Understanding

#### Informasi Dataset
Dataset Netflix Movies and TV Shows merupakan dataset yang berasal dari kaggle, dengan link berikut : https://www.kaggle.com/datasets/shivamb/netflix-shows. Dataset ini kemudian saya download dan saya akses melalui komputer local dan saya simpan dengan nama netflix_titles.csv.

Dataset ini memiliki data sebanyak 8.807 baris data serta 12 kolom dan terdapat kolom yang memiliki missing value. Selanjutnya akan dilakukan proses preprocessing, untuk mempersiapkan data agar dapat diolah menjadi sebuah sistem rekomendasi content-based filtering berdasarkan fitur listed-in. Dataset ini memiliki beberapa kolom antara lain show_id, type, title, director, cast, country, date_added, release_year, rating, duration, listed_in.

Baris kode dibawah ini digunakan untuk membaca file CSV bernama netflix_titles.csv. File CSV tersebut berisi dataset list nama film yang ada di aplikasi netflix beserta dengan fitur lainnya. Hasil pembacaan disimpan dalam variabel df (dataframe). Kemudian menggunakan head() untuk menampilkan 5 baris pertama dari dataframe df. Ini berguna untuk melihat struktur awal data, seperti nama kolom, tipe data, dan isi dari beberapa baris awal.
"""

df = pd.read_csv("netflix_titles.csv")
print("Dataset Shape:", df.shape)
print(df.head())

"""#### Pengecekan Tipe Data
- Kode ini digunakan untuk mengecek atau memeriksa tipe data dari setiap kolom yang ada di variabel df, dan terdapat 2 tipe data yaitu int, dan object.
- untuk int masuk ke numerik antara lain : release_year.
- sedangkan untuk objek masuk ke kategorikal antara lain : show_id, type, title, director, cast, country, date_added, rating, duration, listed_in.
"""

data_types = df.dtypes
print(data_types)

"""#### Penjelasan setiap Fitur
Descriptive merupakan fungsi yang digunakan untuk menghasilkan statistik deskriptif dari kolom-kolom numerik di dalam dataframe df.
Statistik yang ditampilkan mencakup:
- count: jumlah nilai yang tidak kosong (non-NaN),
- mean: nilai rata-rata,
- std: standar deviasi (penyebaran data),
- min: nilai minimum,
- 25%, 50%, 75%: kuartil 1, median, dan kuartil 3,
- max: nilai maksimum.

Pada data ini, terdapat 8.807 baris data, kemudian untuk penjelasannya antara lain :
1. release_year
    - Rata-rata: 2014
    - Minimum: 1925
    - Maksimum: 2021
    - Rentang penayangan/release film ini tidak menunjukkan adanya outlier, karena rentang masih wajar, dan ketika dilihat untuk baris datanya memang benar untuk release ya tahun 1925.

2. show_id
    - ID unik untuk setiap judul yang tercantum di Netflix. Digunakan sebagai identifikasi unik.

3. type
    - Menunjukkan tipe konten untuk menandakan apakah konten berupa film atau serial TV. Tipenya antara lain : Movie dan TV Show.

4. title
    - Judul tayangan yang ada di netflix. Setiap judul biasanya unik dan menjadi identitas utama sebuah tayangan.

5. director
    - Nama sutradara dari setiap film, banyak sutradara yang menjembatani film yang sama, dan banyak pula yang kosong(missing_value).

6. cast
    - Daftar aktor atau aktris yang terlibat dalam tayangan. Namun beberapa terdapat data yang kosong.

7. country
    - Negara tempat produksi konten dilakukan. Isinya bisa berisi lebih dari satu negara atau kosong.

8. date_added
    - Tanggal film ditambahkan ke platform Netflix.

9. rating
    - Kategori usia yang diperbolehkan menonton tayangan. Kategori usia (TV-MA, PG, R, dll) :
        - TV-MA	atau Mature Audience –> khusus dewasa (usia 17+), berisi kekerasan, seks, dll.
        - PG atau Parental Guidance –> butuh bimbingan orang tua untuk anak-anak.
        - R	atau Restricted –> terbatas untuk usia 17+ kecuali didampingi orang tua.
        - TV-G	atau General Audience –> aman untuk semua usia.
        - NC-17	-> Tidak cocok untuk anak-anak di bawah usia 17, meski dengan pengawasan.

10. duration
    -  Lama tayangan film atau jumlah season. untuk movie dalam satuan menit (misal: "90 min") dan untuk TV Show dalam jumlah musim (misal: "1 Season")

11. listed_in
    - Genre atau kategori tayangan. berisi multi genre yang dipisahkan oleh koma, berisi Dramas, Comedies, Action & Adventure

12. description
    -  Ringkasan atau sinopsis singkat dari konten.
"""

print("\nDescriptive Statistics:\n", df.describe())

"""digunakan untuk melihat jumlah tayangan berdasarkan tahun pembuatannya/release_year"""

year_counts = df['release_year'].value_counts()
year_counts_df = year_counts.reset_index()
year_counts_df.columns = ['release_year', 'count']
grouped = year_counts_df.groupby('count')['release_year'].apply(list).reset_index()
grouped.columns = ['jumlah_tayangan', 'daftar_tahun']
grouped.tail()

"""#### Visualisasi Data
Mengambil semua nama kolom dari dataframe df lalu menghitung berapa banyak baris dan kolom grid yang dibutuhkan agar semua fitur bisa divisualisasikan dalam 3 subplot. Kemudian membuat figure dan axes menggunakan matplotlib, lalu mengubah susunannya agar mudah diakses satu per satu. Dilakukan iterasi untuk setiap kolom dan dibuatkan histogramnya dengan judul masing-masing setiap diagramnya agar mudah untuk dibaca.

tidak semua saya visualisasikan, dikarenakan banyak yang memiliki variabel lebih dari yang ada semisal title, atau direction sehingga sulit untuk ditampilkan. Dan berdasarkan visualisasi histogram, terdapat penjelasan seperti berikut :
1. Distribusi dari type (Movie vs TV Show) : Jumlah Movie jauh lebih banyak dibandingkan TV Show,
2. Distribusi dari release_year : Terdapat lonjakan signifikan pada tahun 2000 ke atas, terutama 2000–2020. Distribusi ini menunjukkan bahwa Netflix lebih banyak menambahkan konten modern dibanding konten lama. Skewed to the left (negative skew) hal ini dikarenakan mayoritas data berada di tahun-tahun baru, sedangkan data tahun lama sangat sedikit (misalnya 1925 hanya 1 data).
3. Distribusi dari rating : Paling banyak: TV-MA, TV-14, dan PG. sehingga konten di Netflix didominasi tayangan dewasa dan remaja (TV-MA, TV-14, PG).
4. Distribusi dari duration : paling banyak adalah tayangan tv movies yang menampilkan beberapa session, namun session 1 yang paling unggul.
5. Distribusi dari country : Film dari United States yang paling banyak ada di netflix.
6. Distribusi dari listed_in(genre) : Genre yang paling banyak adalah Dramas, International Movies
"""

cols = df[['type', 'release_year', 'rating']].columns.to_list()
n_cols = 1
n_rows = -(-len(cols) // n_cols)

fig, axes = plt.subplots(n_rows, n_cols, figsize=(20, 20))
axes = axes.flatten()

for i, col in enumerate(cols):
    sns.histplot(data=df, x=col, kde=True, bins=30, color='skyblue', ax=axes[i])
    axes[i].set_title(f'Distribution of {col}')
    axes[i].set_xlabel(col)
    axes[i].set_ylabel('Frequency')

for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

"""digunakan untuk melihat jumlah tanyangan berdasarkan beda durasi antar beberapa film"""

duration = df['duration'].value_counts()
duration_df = duration.reset_index()
duration_df.columns = ['duration', 'count']
grouped_duration = duration_df.groupby('count')['duration'].apply(list).reset_index()
grouped_duration.columns = ['jumlah_tayangan', 'daftar_durasi']
grouped_duration.tail(10)

"""digunakan untuk melihat jumlah tayangan berdasarkan nama negara yang ada di netflix"""

country = df['country'].value_counts()
country_df = country.reset_index()
country_df.columns = ['country', 'count']
grouped_country = country_df.groupby('count')['country'].apply(list).reset_index()
grouped_country.columns = ['jumlah_tayangan', 'daftar_negara']
grouped_country.tail(10)

"""digunakan untuk melihat jumlah tayangan berdasarkan genre yang ada, genrenya berbentuk array dengan minimal 1 genre dan banyak yang lebih dari 1 genre"""

listed_in = df['listed_in'].value_counts()
listed_in_df = listed_in.reset_index()
listed_in_df.columns = ['listed_in', 'count']
grouped_listed_in = listed_in_df.groupby('count')['listed_in'].apply(list).reset_index()
grouped_listed_in.columns = ['jumlah_tayangan', 'daftar_genre']
grouped_listed_in.tail(10)

"""#### Pengecekan Missing Value
- Kode ini digunakan untuk mengecek apakah di dalam kolom yang ada di df terdapat missing value, kemudian di print atau ditampilkan.
- Hasilnya adalah ada beberapa fitur seperti directior, cast, country, data_added, rating, duration yang memiliki missing value.
"""

missing_values = df.isnull().sum()
print(missing_values)

"""## Data Preparation

### Data Preprocessing

#### Menghapus Missing Value

Kode ini mendefinisikan dan menerapkan fungsi untuk menghapus missing value pada fitur type, description dan listed in. dikarenakan saya akan membuat rekomendasi content-based filtering berdasarkan fitur tersebut. untuk hasilnya tidak ada yang terpotong.
"""

df_cleaned = df.dropna(subset=['type', 'description', 'listed_in'])
print("Data setelah menghapus outlier:", df_cleaned.shape)

"""Untuk fitur type, description, dan listed_in saya gabung dikarenakan TfidfVectorizer hanya bisa di-fit ke satu kolom teks. sehingga untuk fitur genre, type, description, dll, akan saya gabungkan dulu menjadi satu string panjang yang mewakili isi/identitas item. Untuk Content-based filtering sendiri bertujuan untuk merekomendasikan item berdasarkan kemiripan deskripsi/karakteristik kontennya"""

df_cleaned['content'] = df_cleaned['type'] + " " + df_cleaned['listed_in'] + " " + df_cleaned['description']
df_cleaned.head()

"""#### TF-IDF vektorisasi
Kode di bawah ini digunakan untuk mengubah teks menjadi numerik agar bisa digunakan untuk menghitung kemiripan antar item dalam sistem rekomendasi berbasis konten. Di sini digunakan TF-IDF Vectorizer dari scikit-learn, yang mengubah setiap dokumen teks menjadi vektor angka berdasarkan bobot kata-kata yang muncul di teks tersebut. Parameter stop_words='english' digunakan untuk menghilangkan kata-kata umum seperti "the", "and", "is", yang tidak memiliki makna penting. dan juga ada parameter max_features yang diatur pada 5000 saja untuk membatasi fitur dari TF-IDF
"""

tfidf = TfidfVectorizer(stop_words='english', max_features=5000)
tfidf_matrix = tfidf.fit_transform(df_cleaned['content'])

"""## Modelling

Sistem rekomendasi ini menggunakan pendekatan **Content-Based Filtering**, yaitu memberikan rekomendasi berdasarkan kemiripan karakteristik antar item.

#### Cosine Similarity
Baris kode ini digunakan untuk menghitung skor kemiripan (similarity score) antar setiap konten yang ada dalam dataset.cosine_similarity menerima dua buah matriks TF-IDF. Hasilnya adalah matriks simetri  menunjukkan kemiripan konten antara item satu dan lainnya. Nilai cosine similarity berada di rentang 0 sampai 1, 1 yang berarti sangat mirip dan 0 yang berarti tidak mirip sama sekali
"""

cosine_sim = cosine_similarity(tfidf_matrix)

"""#### Indeks berdasar judul
Baris kode ini membuat sebuah mapping dari judul ke indeks baris dataframe, yang akan digunakan untuk mencari rekomendasi berdasarkan nama judul dan drop_duplicates digunakan untuk menghindari error jika ada judul yang sama sehingga hanya mengambil satu versi saja.
"""

indices = pd.Series(df.index, index=df_cleaned['title']).drop_duplicates()
indices

"""#### Fungsi get_recommendations()
Fungsi get_recommendations() digunakan untuk memberikan top_n = 10 atau 10 rekomendasi konten yang paling mirip berdasarkan deskripsi, genre, dan tipe konten dari judul yang diberikan/diinputkan. Dengan memanfaatkan cosine similarity dengan representasi TF-IDF, sistem ini mengukur kemiripan antar item secara tekstual dan mengembalikannya dalam bentuk judul, genre, dan deskripsi. Dan ketika judul yang dimasukkan tidak ada dalam daftar film netflix maka akan diberikan 'Judul tidak ditemukan.
"""

def get_recommendations(title, cosine_sim=cosine_sim, top_n=10):
    if title not in indices:
        return "Judul tidak ditemukan."

    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    sim_scores = sim_scores[1:top_n+1]

    recommendations = []
    for i, score in sim_scores:
        film_info = df_cleaned.iloc[i][['title', 'listed_in', 'type', 'description']]
        film_info['similarity'] = round(score, 4)
        recommendations.append(film_info)

    return pd.DataFrame(recommendations)

"""Hasil dari get_recommendation untuk film Kota Factory terpilih top 10 film yang hampir mirip dengan film Kota Factory, hal ini mirip dari segi genre, maupun tipe dan deskripsinya."""

get_recommendations("Kota Factory").reset_index()

"""## Evaluasi

#### Hasil Evaluasi Model
Baris kode ini menginisialisasi variabel nama dengan Narcos yang nantinya akan digunakan untuk mencari rekomendasi film. Selain itu baris ini juga menampilkan hasil dari film narcos beruba judul, genre, deskripsi dan tipe.
"""

nama = "Narcos"
df[df['title'] == nama][['title', 'listed_in', 'description', 'type']]

"""Baris kode ini menjalankan fungsi get_recommendations() untuk judul "Narcos", dan mengembalikan 10 konten lain yang paling mirip secara konten dengan "Narcos". ketika fungsi dijalankan maka sistem akan mengecek apakah judul terdapat di film yang ada di netflix, kemudian mengambil similiarity yang paling tinggi nilainya kemudian mengambil 10 konten yang nilainya paling tinggi.

Dengan menampilkan output berupa judul yang berisi konten yang mirip dengan "Narcos"
"""

get_recommendations(nama)